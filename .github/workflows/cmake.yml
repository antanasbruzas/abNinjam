name: cmake CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        cmake: [ '3.10.x', '3.13.x', '3.15.x', '3.17.x' ]
        exclude:
          - os: windows-latest
            cmake: '3.10.x'
          - os: windows-latest
            cmake: '3.13.x'
    steps:
    - uses: actions/checkout@v2
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.0
      with:
        cmake-version: ${{ matrix.cmake }}
        github-api-token: ${{ secrets.GITHUB_TOKEN }}
    - name: dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install zenity lv2-dev meson bison doxygen wayland-protocols gperf
              cd ~
              git clone https://gitlab.freedesktop.org/xorg/proto/xcbproto.git
              cd xcbproto
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
              git clone https://gitlab.freedesktop.org/xorg/lib/libxcb.git
              cd libxcb
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              git clone --recursive https://gitlab.freedesktop.org/xorg/lib/libxcb-util.git
              cd libxcb-util
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              git clone --recursive https://gitlab.freedesktop.org/xorg/lib/libxcb-cursor.git
              cd libxcb-cursor
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              git clone --recursive https://gitlab.freedesktop.org/xorg/lib/libxcb-keysyms.git
              cd libxcb-keysyms
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              git clone --recursive https://gitlab.freedesktop.org/xorg/lib/libxcb-image.git
              cd libxcb-image
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              git clone --recursive https://gitlab.freedesktop.org/xorg/lib/libxcb-render-util.git
              cd libxcb-render-util
              CFLAGS='-g -O2 -fPIC' ./autogen.sh
              make
              sudo make install
              cd ~
              git clone https://github.com/xkbcommon/libxkbcommon.git
              cd libxkbcommon
              meson setup build -Ddefault_library=static
              ninja -C build
              cd ~
              git clone https://github.com/radarsat1/liblo.git
              cd liblo/cmake
              cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release -DWITH_STATIC=ON -DWITH_TOOLS=OFF -DWITH_TESTS=OFF -DWITH_EXAMPLES=OFF -DWITH_CPP_TESTS=OFF .
              cmake --build . --config Release
              sudo cmake --build . --config Release --target install
              cd ~
              git clone https://github.com/xiph/ogg.git
              cd ogg
              cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release .
              cmake --build . --config Release
              sudo cmake --build . --config Release --target install
              cd ~
              git clone https://github.com/xiph/vorbis.git
              cd vorbis
              cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release .
              cmake --build . --config Release
              sudo cmake --build . --config Release --target install
        elif [ "$RUNNER_OS" == "Windows" ]; then
              vcpkg install libvorbis:x64-windows-static
              vcpkg integrate install
              cd ~
              git clone https://github.com/radarsat1/liblo.git
              cd liblo/cmake
              cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CONFIGURATION_TYPES="Release" -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DWITH_STATIC=ON -DWITH_TOOLS=OFF -DWITH_TESTS=OFF -DWITH_EXAMPLES=OFF -DWITH_CPP_TESTS=OFF -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded" .
              cmake --build . --config Release
              cmake --build . --config Release --target install
        elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install pkg-config
              brew install zenity
              brew install lv2
              cd ~
              git clone https://github.com/radarsat1/liblo.git
              cd liblo/cmake
              cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release -DWITH_STATIC=ON -DWITH_TOOLS=OFF -DWITH_TESTS=OFF -DWITH_EXAMPLES=OFF -DWITH_CPP_TESTS=OFF .
              cmake --build . --config Release
              sudo cmake --build . --config Release --target install
              cd ~
              git clone https://github.com/xiph/ogg.git
              cd ogg
              cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release .
              cmake --build . --config Release
              sudo cmake --build . --config Release --target install
              cd ~
              git clone https://github.com/xiph/vorbis.git
              cd vorbis
              cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release .
              cmake --build . --config Release
              sudo cmake --build . --config Release --target install
        else
              echo "$RUNNER_OS not supported"
              exit 221
        fi
    - name: initialize
      run: git submodule update --init
    - name: configure
      run: |
        cmake --version
        if [ "$RUNNER_OS" == "Linux" ]; then
              cmake -DUSE_STATIC_DEPENDENCIES=ON -DCMAKE_BUILD_TYPE=Release -DXKBCOMMON_INCLUDE_DIR=~/libxkbcommon/xkbcommon/ -DXKBCOMMON_LIBRARY=~/libxkbcommon/build/libxkbcommon.a -DXKBCOMMONX11_INCLUDE_DIR=~/libxkbcommon/xkbcommon/ -DXKBCOMMONX11_LIBRARY=~/libxkbcommon/build/libxkbcommon-x11.a .
        elif [ "$RUNNER_OS" == "Windows" ]; then
              cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CONFIGURATION_TYPES="Release" -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DLIBLO_INCLUDE_DIR=/C/Program\ Files\ \(x86\)/liblo/include/ -DLIBLO_LIBRARY=/C/Program\ Files\ \(x86\)/liblo/lib/liblo_static.lib .
        elif [ "$RUNNER_OS" == "macOS" ]; then
              cmake -DUSE_STATIC_DEPENDENCIES=ON -DCMAKE_BUILD_TYPE=Release -DLV2_ROOT=/usr/local/Cellar/lv2/ -GXcode .
        else
              echo "$RUNNER_OS not supported"
              exit 222
        fi
    - name: build
      run: cmake --build . --config Release
    - name: install
      run: cmake --build . --target install --config Release
    - if: github.ref == 'refs/heads/master'
      name: test-dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install libgtkmm-3.0-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
            vcpkg list
        elif [ "$RUNNER_OS" == "macOS" ]; then
            brew list
        else
            echo "$RUNNER_OS not supported"
            exit 223
        fi
    - if: github.ref == 'refs/heads/master'
      name: test
      run: |
        cd ~ && git clone --recursive https://github.com/steinbergmedia/vst3sdk.git && cd vst3sdk && mkdir build && cd build && cmake -DSMTG_ADD_VSTGUI=OFF -DSMTG_ADD_VST3_PLUGINS_SAMPLES=OFF -DCMAKE_BUILD_TYPE=Release .. && cmake --build . --config Release
        if [ "$RUNNER_OS" == "Linux" ]; then
              ./bin/Release/validator -e ~/.vst3/abNinjam.vst3 | grep "0 tests failed" || exit 224
        elif [ "$RUNNER_OS" == "Windows" ]; then
              ./bin/Release/validator.exe "C:/Program Files/Common Files/VST3/abNinjam.vst3" | grep "0 tests failed" || ./bin/Release/validator.exe "C:/Program Files/Common Files/VST3/abNinjam.vst3" | grep "0 tests failed" || exit 225
        elif [ "$RUNNER_OS" == "macOS" ]; then
              ./bin/Release/validator /Users/runner/Library/Audio/Plug-ins/VST3/abNinjam.vst3 | grep "0 tests failed" || exit 226
        else
              echo "$RUNNER_OS not supported"
              exit 227
        fi
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      name: upload-artifact-linux-vst3
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-vst3-${{ matrix.os }}-${{ matrix.cmake }}
        path: ~/.vst3
    - if: ${{ matrix.os == 'windows-latest' }}
      name: upload-artifact-windows-vst3
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-vst3-${{ matrix.os }}-${{ matrix.cmake }}
        path: C:\Program Files\Common Files\VST3
    - if: ${{ matrix.os == 'macOS-latest' }}
      name: upload-artifact-mac-vst3
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-vst3-${{ matrix.os }}-${{ matrix.cmake }}
        path: /Users/runner/Library/Audio/Plug-ins/VST3
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      name: upload-artifact-linux-lv2
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-lv2-${{ matrix.os }}-${{ matrix.cmake }}
        path: ~/.lv2
    - if: ${{ matrix.os == 'macOS-latest' }}
      name: upload-artifact-mac-lv2
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-lv2-${{ matrix.os }}-${{ matrix.cmake }}
        path: /Users/runner/Library/Audio/Plug-ins/lv2

