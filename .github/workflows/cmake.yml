name: cmake CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - name: dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install libxcb-util-dev libxcb-cursor-dev libxcb-keysyms1-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libvorbis-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
              git clone https://github.com/xiph/ogg.git
              cd ogg
              cmake -DBUILD_SHARED_LIBS=1 .
              cmake --build .
              cmake --build . --target install
              cd ..
              git clone https://github.com/xiph/vorbis.git
              cd vorbis
              cmake -DBUILD_SHARED_LIBS=1 -DOGG_INCLUDE_DIR="C:/Program Files (x86)/libogg/include/" -DOGG_LIBRARY="C:/Program Files (x86)/libogg/lib/ogg.lib" .
              cmake --build .
              cmake --build . --target install
        else
              echo "$RUNNER_OS not supported"
              exit 1
        fi
    - name: initialize
      run: git submodule update --init
    - name: configure
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
              cmake .
        elif [ "$RUNNER_OS" == "Windows" ]; then
              cmake -DCMAKE_CONFIGURATION_TYPES="Release" -DOGG_INCLUDE_DIR="C:/Program Files (x86)/libogg/include/" -DOGG_LIBRARY="C:/Program Files (x86)/libogg/lib/ogg.lib" -DVORBIS_INCLUDE_DIR="C:/Program Files (x86)/vorbis/include/" -DVORBIS_LIBRARY="C:/Program Files (x86)/vorbis/lib/vorbis.lib" -DVORBISENC_INCLUDE_DIR="C:/Program Files (x86)/vorbis/include/" -DVORBISENC_LIBRARY="C:/Program Files (x86)/vorbis/lib/vorbisenc.lib" .
        else
              echo "$RUNNER_OS not supported"
              exit 1
        fi
    - name: build
      run: cmake --build . --config Release
    - name: install
      run: cmake --build . --target install
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      name: upload-artifact-linux
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-${{ matrix.os }}
        path: ~/.vst3
    - if: ${{ matrix.os == 'windows-latest' }}
      name: upload-artifact-windows
      uses: actions/upload-artifact@v2
      with:
        name: abNinjam-${{ matrix.os }}
        path: C:\Program Files\Common Files\VST3 
